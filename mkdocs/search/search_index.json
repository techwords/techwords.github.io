{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TechWords MKDocs","text":"<p>This website demonstrates using Material for MKDocs effectively. It is written for users of all skill levels, from beginners to experts. The contents will take you through the process of installing the necessary tools, creating a GitHub Pages site, and using Material for MKDocs to create a simple site.</p> <p>The documentation is organized into section tabs, each of which covers a different aspect of MKDocs and supporting tools. For example, there are sections for installation, getting started, and troubleshooting.</p> <p>Within each section, you will find topics, tutorials, and other resources that explain how to use MKDocs to complete specific tasks. You can also find references to additional documentation to learn more about MKDocs features not covered on this site.</p> <p>GitHub and Material for MKDocs are open source projects and are free to use.</p>"},{"location":"github/","title":"GitHub Pages","text":"<p>GitHub is a software development and version control platform using Git. Developers can use GitHub to store and manage their code. Technical writers can use GitHub to write documentation as code by storing and sharing content using the same tool as their development team. Because you are using the same tool as your developers, requesting document reviews is simplified because you are using the same tool.</p> <p>GitHub Pages is a static web service that can be used for blogs and product documentation. GitHub Pages takes HTML, CSS, and JavaScript files from a repository on GitHub and publishes a website. It is a great way to host your personal website, portfolio, blog, or documentation for your open source projects.</p> <p>Benefits of using GitHub Pages:</p> <ul> <li>Easy to use: GitHub pages is easy to use, even if you're not a developer. To create a GitHub Pages site, all you need to do is create a repository on GitHub and push your static files to the repository. GitHub will automatically publish your website.</li> <li>Free to use: GitHub Pages is free to use for public repositories. If you have a private repository, you can use GitHub Pages if you have a paid GitHub plan.</li> <li>Custom domains: You can use your own custom domain name for your GitHub Pages site. This is a great way to make your website look more professional while still hosting your site on GitHub Pages.</li> <li>Version control: GitHub pages integrates seamlessly with GitHub's version control features. This means you can easily track changes to your website and roll back to previous versions, if needed.</li> </ul>"},{"location":"github/account/","title":"Create a GitHub Account","text":"<p>Steps for creating a GitHub account.</p> <ol> <li>Go to the GitHub page, then click Sign Up.</li> <li>Enter your email address.</li> <li>Create a password.</li> <li> <p>Enter a username.</p> <p>Note</p> <p>The username you enter here will be used in your GitHub Pages website URL. For example, if you use <code>techwords</code> as the username, then your public repository will be <code>techwords.github.io</code>, and your GitHub Pages website will be <code>techwords.github.io</code>.</p> </li> </ol>"},{"location":"github/index-file/","title":"Create an Index File","text":"<p>For the Tech Words GitHub Pages main website, a single HTML file is used. This HTML file contains the text, links, and styles used on the page.</p> <ol> <li>Open GitHub Desktop.</li> <li>Open the GitHub Pages repository.</li> <li>Click Open in Visual Studio Code. Or select Repository &gt; Open in Visual Studio Code.</li> <li>In Visual Studio Code, select File &gt; New File, type <code>index.html</code>, then press Enter. This creates an index.html file in the GitHub Pages root folder.</li> <li>Copy and paste the example below into the index.html file in Visual Studio Code.</li> <li> <p>Update the following:</p> <ul> <li>Change the <code>&lt;title&gt;&lt;/title&gt;</code> to the title for your website.</li> <li>Change <code>img src=</code> to your logo. Save your logo in the <code>`images</code> folder.</li> <li>Change <code>alt=</code> to describe your logo. This is useful if the image does not display.</li> <li>Change the main content (<code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code>, and <code>&lt;p&gt;</code> tags) to your own writing samples.</li> <li>Change the website addresses (<code>a href</code>) to your own writing samples. The <code>{target=_blank}</code> will open the link in a new tab.</li> </ul> </li> <li> <p>Save the file.</p> </li> <li>Open GitHub Desktop and select the GitHub Pages repository. You should see your changes displayed. Green highlights are new content, red highlights are removed content.</li> <li>In the Update field, type a name for this update. For example, Initial check-in.</li> <li>In the Description field, type a description for this update. For example, First check-in for the index file.</li> <li>Click Commit to main.</li> <li>Click Push origin. This pushes your changes to the GitHub repository. Wait for a few minutes, then go to your GitHub Pages website to see your changes.</li> </ol>"},{"location":"github/index-file/#index-file-example","title":"Index File Example","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Tech Words&lt;/title&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;style&gt;\nbody {\nfont-family: Arial, Helvetica, sans-serif;\n}\n\n.header {\npadding: 80px; /* Adds some padding */\ntext-align: center; /* Centers the text */\nbackground: #FFFFFF; /* A white background */\ncolor: white; /* White text color */\n}\n\n/* Increase the font size of the &lt;h1&gt; element */\n.header h1 {\nfont-size: 40px;\n}\n\n/* Change color on hover/mouse-over */\n.navbar a:hover {\nbackground-color: #ddd; /* Grey background color */\ncolor: black; /* Black text color */\n}\n\n/* Ensure proper sizing */\n* {\nbox-sizing: border-box;\n}\n\n/* Make the logo responsive to fit the device screen */\n.responsive {\nmax-width: 100%;\nheight: auto;\n}\n\n.footer {\npadding: 20px; /* Adds some padding */\ntext-align: center; /* Centers the text*/\nbackground: #FFFFFF; /* A white background */\n}\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=\"header\"&gt;\n        &lt;img src=\"images/Black Elegant Modern Name Initials Monogram Logo 1a.png\" alt=\"Tech Words Documentation\" class=\"responsive\"&gt;\n    &lt;/div&gt;\n\n    &lt;div align=\"center\"&gt;\n        &lt;h1&gt;Documentation Tool Examples&lt;/h1&gt;\n        &lt;p&gt;I used GitHub Pages to create a simple page with links to examples using different technical writing tools.&lt;/p&gt;\n        &lt;/br&gt;\n        &lt;h2&gt;MadCap Flare 2020&lt;/h2&gt;\n        &lt;p&gt;Click the link to view the Morena template.&lt;/p&gt;\n        &lt;a href=\"https://techwords.github.io/madcap/Content/Home.htm\" target=\"_blank\"&gt;MadCap Flare 2020 site&lt;/a&gt;\n\n        &lt;h2&gt;Material for MKDocs&lt;/h2&gt;\n        &lt;p&gt;Click the link to view a Material for MKDocs site.&lt;/p&gt;\n        &lt;a href=\"https://techwords.github.io/mkdocs/\" target=\"_blank\"&gt;Material for MKDocs site&lt;/a&gt;\n\n        &lt;h2&gt;GitHub Public Repository&lt;/h2&gt;\n        &lt;p&gt;Click the link to view the public GitHub repo where these sites are stored.&lt;/p&gt;\n        &lt;a href=\"https://github.com/techwords/techwords.github.io\" target=\"_blank\"&gt;GitHub Public Repository&lt;/a&gt;\n    &lt;/div&gt;\n\n    &lt;/br&gt;\n\n    &lt;div class=\"footer\"&gt;\n        &lt;h2&gt;Sites are a work in progress&lt;/h2&gt;\n    &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"github/public-repository/","title":"Create and Clone a GitHub Public Repository","text":"<p>When you create a public repository, this will be your GitHub Pages website. While your repository is visible to the public, only contributors can modify your repository. You must allow other GitHub users to be contributors to your repositories.</p> <p>For more GitHub Pages documentation, visit github.com.</p> <p>For more information about public GitHub repositories, visit docs.github.io</p> <p>Steps for creating a public repo on GitHub and cloning the repository with GitHub Desktop.</p> <ol> <li>From the GitHub Dashboard, next to Top Repositories, click New. Or from your Repositories page, click New.</li> <li>Enter your GitHub website URL in the Repository Name field. Example: <code>techwords.github.io</code>.</li> <li>Make sure the Public option is selected.</li> <li>Click Create Repository.</li> <li>Copy the HTTPS URL for the public repository. Example: <code>https://github.com/techwords/techwords.github.io.git</code>.</li> <li>Open GitHub Desktop.</li> <li>Select File &gt; Clone Repository, then select the URL tab.</li> <li>Paste the URL in to the Repository URL or GitHub username and repository field.</li> <li>Choose a local path to save your content to.</li> <li>Click Clone.</li> </ol>"},{"location":"mkdocs/","title":"Material for MKDocs","text":"<p>MKDocs is a fast and simple static site generator that is geared towards building project documentation. Documentation source files are written in Markdown and configured with a single YAML configuration file.</p> <p>Material for MKDocs is a powerful documentation framework built on top of MKDocs to create documentation websites. It includes a variety of features to make your documentation more engaging and easy to use.</p> <p>Benefits of using Material for MKDocs:</p> <ul> <li>Great design: Material for MKDocs produces documentation sites that are visually appealing and easy to navigate.</li> <li>Responsive: Material for MKDocs sites are responsive, so they look great on all devices, from desktops to smartphones.</li> <li>Feature-rich: Material for MKDocs includes a variety of features to make your documentation more engaging and easy to use, such as a table of contents, code highlighting, search, themes, and plugins.</li> </ul>"},{"location":"mkdocs/create-repository/","title":"Create a New MKDocs Repo","text":"<p>Steps for creating a new MKDocs repository.</p>"},{"location":"mkdocs/material-for-mkdocs/","title":"Download Material for MKDocs","text":"<p>For more MKDocs documentation, visit mkdocs.org.</p> <p>Steps for downloading Material for MKDocs.</p>"},{"location":"tools/","title":"Tools","text":"<p>Before getting started with GitHub repositories and writing your documentation, you need to install some tools.</p> <p>GitHub Desktop is an open-source application that provides a graphical user interface (GUI) for interacting with GitHub. You will use this to pull (download) and push (upload) content from your local system to a GitHub repository.</p> <p>Visual Studio Code is an integrated development environment (IDE) created by Microsoft. This allows you to create and modify files for creating content on your GitHub Pages website. Some file format you will work with are: markdown, YAML, and cascading style sheets (CSS).</p>"},{"location":"tools/github-desktop/","title":"Install GitHub Desktop","text":"<p>GitHub Desktop is supported on macOS and Windows systems. For Linux, there is an unofficial fork available, but that will not be covered in this documentation.</p> <p>For more GitHub Desktop documentation, visit desktop.github.io.</p> macOSWindows <p>Installing GitHub Desktop is supported on macOS 10.13 or later.</p> <ol> <li>Go to the GitHub Desktop download page.</li> <li>Click Download for macOS.</li> <li>In the Downloads folder, double-click the GitHub Desktop file.</li> <li>After the file has been decompressed, double-click the GitHub Desktop file.</li> <li>GitHub Desktop will launch after the installation is complete.</li> </ol> <p>Installing GitHub Desktop is supported on Windows 10 64-bit or later.</p> <ol> <li>Go to the GitHub Desktop download page.</li> <li>Click Download for Windows.</li> <li>In the Downloads folder, double-click the GitHub Desktop executable file.</li> <li>GitHub Desktop will launch after the installation is complete.</li> </ol>"},{"location":"tools/visual-studio-code/","title":"Visual Studio Code","text":"<p>Visual Studio Code is supported on macOS, Windows, and Linux systems.</p> <p>For more Visual Studio Code documentation, visit visualstudio.com.</p> macOSWindowsLinux DebianLinux RPM <p>Installing Visual Studio Code is supported on macOS 10.11 or later.</p> <ol> <li>Go to the Visual Studio Code download page.</li> <li>Click Mac to download the file.</li> <li>In the Downloads folder, double-click the VSCode file. Example: VSCode-darwin-universal.zip.</li> <li>After the file has been decompressed, double-click the VSCodeUserSetup file.</li> <li>Visual Studio Code will launch after the installation is complete.</li> </ol> <p>Installing Visual Studio Code is supported on Windows 10 or later.</p> <ol> <li>Go to the Visual Studio Code download page.</li> <li>Click Windows to download the file.</li> <li>In the Downloads folder, double-click the VSCodeUserSetup executable file.</li> <li>Visual Studio Code will launch after the installation is complete.</li> </ol> <p>Installing Visual Studio Code is supported on Debian systems, like Debian and Ubuntu.</p> <ol> <li>Go to the GitHub Desktop download page.</li> <li>Click .deb to download the file.</li> <li> <p>In the terminal, navigate to the Downloads folder.</p> <p>Example: <code>cd /downloads</code>.</p> </li> <li> <p>Run <code>sudo apt install &lt;filename&gt;.deb</code>. Enter your password, if prompted.</p> <p>Example: <code>sudo apt install code_1.82.2-1694671812_amd64.deb</code>.</p> </li> </ol> <p>Coming soon.</p>"}]}