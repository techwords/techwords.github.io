{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"User-Focused Documentation","text":"<p>The goal for product documentation is to improve the overall user experience by providing well-written and easy-to-understand documentation to help users learn and use the product more quickly and efficiently. This can lead to increased satisfaction and loyalty.</p> <p>Product documentation should also enable users to get the maximum use and value out of the product. This is done by providing clear and concise instructions on how to use the product, as well as troubleshooting common problems and answering frequently asked questions.</p> <p>Product documentation can also support other teams within the organization.</p> <ul> <li>Promote the product and encourage adoption: Good documentation can be a valuable marketing tool, helping to attract new users and convince them that the product is worth using.</li> <li>Reduce calls to customer support: By providing comprehensive and informative documentation, users can often resolve their own issues without having to contact support. This can give the support team more time to address more difficult issues.</li> </ul> <p>This site presents different methods for creating user-focused documentation.</p>"},{"location":"dita/","title":"DITA Topic Types","text":"<p>The Darwin Information Typing Architecture (DITA) is an XML-based open standard for authoring, producing, and delivering technical information. DITA is designed to be modular, reusable, and extensible, making it a good base for creating and managing complex documentation.</p> <p>DITA content is organized into topics, which are self-contained units of information. Topics can be reused across multiple documents, and they can be assembled in different ways to create different types of documentation. For example, a single topic about a product feature could be included in a user guide, reference manual, and a training manual.</p> <p>DITA content has three distinct topic types:</p> <ul> <li>Concept: The introduction or overview for a product or feature. Use this to explain the theory, principles, and background behind a product or feature.</li> <li>Task: The step-by-step instructions on how to complete a task.</li> <li>Reference: The detailed information about a product or feature, like the syntax, commands, and configuration settings.</li> </ul>"},{"location":"dita/#challenge-using-dita","title":"Challenge Using DITA","text":"<p>A challenge with using DITA is in how strictly the format is followed. There are times when the DITA structure does not fit some content. Some product features do not need a dedicated concept topic and you could simply include the short overview in the task. Or maybe you have several related but short tasks that would be better combined into one task topic instead of multiple topics.</p>"},{"location":"dita/#dita-with-a-twist","title":"DITA with a Twist","text":"<p>Instead of implementing strict rules, the three topic types should be used as a guideline for separating product content into specific type, whenever possible. Your readers will adjust to this style and come to expect a task topic to give them instructions on how to complete a task.</p> <p>You can use the three topic types as a basis for creating your product documentation and modify it to suit your needs. For example, to help users who skim your content, you could include a quick summary at the beginning of your concept topic. This allows a skimmer to read a couple of sentences to understand the product or feature, and move on. Those who want to learn can read the entire concept topic.</p> <p>DITA uses its own XML schema. But, you could use the three topic types to structure your content in any writing tool.</p>"},{"location":"dita/concept/","title":"Role-Based Access Control","text":"<p>Role-based access control, or RBAC, allows administrators to control access by creating roles, like read-only, then assigning users to those roles, instead of setting access controls per user.</p>"},{"location":"dita/concept/#overview","title":"Overview","text":"<p>Role-based access control (RBAC) is a security framework that defines and controls user access to resources based on the roles that users have within an organization. RBAC is a widely used security model, and is supported by many different operating systems, applications, and cloud platforms.</p>"},{"location":"dita/concept/#core-concepts","title":"Core concepts","text":"<p>The RBAC framework is based on the following core concepts:</p> <ul> <li>Roles: Roles represent the different functions that users perform within an organization. For example, some common roles include \"administrator,\" \"manager,\" and \"salesperson.\"</li> <li>Permissions: Permissions define the actions that users can take on resources. For example, some common permissions include \"read,\" \"write,\" and \"execute.\"</li> <li>Role assignments: Role assignments associate users with roles. When a user is assigned to a role, they gain the permissions that are associated with that role.</li> </ul>"},{"location":"dita/concept/#benefits-of-rbac","title":"Benefits of RBAC","text":"<p>RBAC offers a number of benefits, including:</p> <ul> <li>Simplified administration: RBAC allows administrators to manage user access by managing roles. This can simplify administration, especially in large organizations with many users.</li> <li>Improved security: RBAC can help to improve security by reducing the risk of unauthorized access to resources. By assigning users to roles and granting permissions to roles, administrators can ensure that users only have the access they need to perform their jobs.</li> <li>Flexibility: RBAC is a flexible framework that can be adapted to meet the specific needs of an organization. For example, organizations can create custom roles and permissions to meet their specific requirements.</li> </ul>"},{"location":"dita/concept/#example","title":"Example","text":"<p>Here is a simple example of how RBAC can be used:</p> <ul> <li>An organization has two roles: \"administrator\" and \"user.\"</li> <li>The \"administrator\" role has permissions to read, write, and execute all files on the system.</li> <li>The \"user\" role has permissions to read and execute all files on the system, but cannot write to any files.</li> <li>A user named \"John\" is assigned to the \"user\" role.</li> <li>As a result, John can read and execute all files on the system, but he cannot write to any files.</li> </ul>"},{"location":"dita/concept/#conclusion","title":"Conclusion","text":"<p>RBAC is a powerful and flexible security framework that can be used to improve security and simplify administration in organizations of all sizes.</p>"},{"location":"dita/reference/","title":"RBAC Descriptions","text":"<p>This is a reference topic using some role-based access features and descriptions for content. The role type uses a rowspan to visually group the role type descriptions to the role type resource. A rowspan is similar to merging cells in a spreadsheet. For columns, colspan would merge columns.</p> Resource Description resource A resource is something you grant other users access to. A resource can be a file or other object. role type Grant a user access to the resource based on a role type. Role types are: <code>read-only</code>, <code>contributor</code>, and <code>admin</code>. <code>read-only</code>: The user can read the content but cannot modify or delete it. \u2060 <code>contributor</code>: The user can modify the content but cannot delete the file. \u2060 <code>admin</code>: The user can modify and delete the file. \u2060 password A username and password are required to log in. username A username and password are required to log in."},{"location":"dita/task/","title":"Install Agent","text":"<p>This is a task topic using installing a software agent as an example. This topic uses collapsible sections to hide information that is not necessary for most users. If users should experience issues, the collapsible section title must be relevant to the issue (normally what the user sees on their screen, like a message title) so users can expand the section they need. This topic uses the collapsible sections for errors/troubleshooting, but these sections could be used for optional information about the task.</p> <ol> <li>Download the agent installation file.</li> <li> <p>Double-click the agent installation file. A Windows user account control (UAC) message may appear. Click OK to allow the installation.</p> Windows UAC <p>This is a collapsible block. An example of what content this can contain:</p> <p>If you are installing this on a company computer, you may not have permission to install any software. You may need to ask your IT administrator to either grant you access to install the agent or your administrator may install it for you.</p> </li> <li> <p>Enter your username and password. This allows the agent to log in to the cloud server.</p> Cannot Connect to Server <p>This is a collapsible block. An example of what content this can contain:</p> <p>If you see the message \"Cannot connect to server,\" your company might be using a proxy server. You may need to ask your network administrator to allow port 1234. The agent requires port 1234 to upload data to and receive commands from the cloud server.</p> </li> <li> <p>Close the installation window.</p> </li> </ol>"},{"location":"usertypes/","title":"Audience Types","text":"<p>Technical and product documentation has a variety of audiences to cater to. These audiences can be grouped as follows:</p> <ul> <li>Technical and Non-technical</li> <li>Expert and Novice</li> <li>Learner and Skimmer</li> </ul> <p>Ideally, documentation is usable by all of the above audiences.</p> <p>How does a technical writer address these types of users?</p>"},{"location":"usertypes/#technical-and-non-technical-users","title":"Technical and Non-Technical Users","text":"<p>Technical users know the industry your product is part of. They may not know how to use your product, but they understand what the features should do and how your product should fit into their organization's workflow. Technical users can be passionate about the industry their technical expertise is in, and your product documentation needs to meet their expectations. You can do this by making sure your product documentation accurately explains the concepts and features of your product. Inaccuracies or missing content will not instill any confidence in them about your product.</p> <ul> <li>Your Reference topics will help your technical users get the most out of your product. Make your reference topics as complete as possible. For example, if a command has multiple flags, list all of the available flags. See this Reference topic for an example.</li> </ul> <p>Non-technical users do not have the specialized knowledge or skills that your product is part of. These could be users who are not familiar with technology or have some knowledge, but are not experts. Non-technical users need clear an concise language, so try to avoid jargon and technical terms. If you use acronyms, be sure to include the full name or term the first time it is used in a topic, include the acronym in parentheses, then use the acronym. Example: HyperText Markup Language (HTML).</p> <ul> <li>Your Concepts, Tasks, Tutorials, and How-To Guides will help your non-technical users gain the skills they need to use your product.</li> </ul>"},{"location":"usertypes/#expert-and-novice-users","title":"Expert and Novice Users","text":"<p>Expert and novice users of your product are defined by how well they know your product. An expert in your product may not have a lot of technical knowledge in the field your product is related to, they just know how to use your product really well. A novice may be new to your product, but could have years of experience in the related field and in using similar products.</p> <ul> <li>Your Task topics will help your experienced users learn how to use new features or as a reminder of how to use an existing feature. Expert users may also benefit from your Reference topics.</li> <li>Your Concept and Task topics will help your novice users learn how to use your entire product, not just a new feature. Novices may also benefit from your Tutorials and How-To Guides if they are new to the industry your product is related to.</li> </ul>"},{"location":"usertypes/#learner-and-skimmer","title":"Learner and Skimmer","text":"<p>Learners are willing to read your product documentation to understand how your product works and what goals it will help them accomplish.</p> <ul> <li>Make sure your product documentation is complete and well organized to help learners seamlessly go from feature to feature as they use your product.</li> <li>Everything that makes up your product documentation (Topics, Tutorials, How-To Guides) are beneficial for the learner.</li> </ul> <p>Skimmers are probably the hardest user to create product documentation for. Skimmers tend to look for the answer to the question they have about your product, like \"How do I generate a report?\" or \"How do I fix this?\" Skimmers could be technical, non-technical, an expert, or a novice. The following are suggestions to make your product documentation more helpful for the skimmer.</p> <ul> <li>In your concept topics, write a quick summary (a TL;DR) so skimmers can glance at it to understand what this set of topics is about. Use something to denote where the quick summary ends and the full concept begins, like a line. See this Concept topic for an example.</li> <li>In your task topics, use collapsible sections to hide additional information. This allows novices and learners to expand these sections to learn more, when more information is available, but keeps it hidden for users who do not need it. See this Task topic for an example.</li> <li>Work with your support team to identify common issues that could be addressed and highlighted in product documentation. You could address these common issues in a troubleshooting or frequently asked questions section.</li> <li>Use product terms consistently to make searching more accurate. This can be tough because sometimes there are internal names for features that your users will hear but cannot find it in your documentation. It is recommended to use the correct product terminology, not internal terms.</li> </ul> <p>When There Is No Time</p> <p>Instead of addressing all user types, you could pick the one user type that you think is the biggest one using your documentation. Focusing on one user type is good if you must turn out a high volume of documentation in a short amount of time.</p> <p>Some Things You Cannot Fix</p> <p>No matter how well your write your product documentation, there will always be users who call your support team first and ask for help. They don't read your documentation, they don't watch your tutorials, they just want someone to give them the answer. Or better yet, fix the problem for them.</p>"}]}