{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Topic Structure","text":"<p>Technical and product documentation has opposing audiences to cater to.</p> <ul> <li>Technical vs Non-technical</li> <li>Experienced vs Novice</li> <li>Skimmer vs Learner</li> </ul> <p>Documentation is expected to be usable by all of the above groups, and more. It would be insurmountable to satisfy every type of user. So the above opposing user types seem to be the most prevalent and should cover most audiences.</p> <p>How does a technical writer address these types of users?</p> <p>The following is from the experience of one technical writer. There are many ways to overcome the challenges of technical writing for a variety of end-users.</p>"},{"location":"#one-pick-one-user-type","title":"One - Pick One User Type","text":"<p>You could pick the one user type that you think is the biggest one using your documentation. While not an ideal choice, there are some situations where this is the best option.</p> <p>For example, you are the only technical writer and you must write for multiple products or feature releases. As the only writer, you may not have the time to write for more than one type of user. In this situation, it is best to write well for your biggest audience.</p>"},{"location":"#two-use-dita-topic-types","title":"Two - Use DITA Topic Types","text":"<p>You could follow the DITA structure to create different topic types that serve a specific documentation function.</p> <ul> <li>Concept Topic - Introduce the feature or subject.</li> <li>Task Topic - Provides the steps the user must go through to accomplish a goal.</li> <li>Reference Topic - Supporting information for the Instruction Topic. Example: A list of all configuration settings and descriptions.</li> </ul> <p>By separating the content into topic types, experienced users can choose to skip the concept topic and go right to the task topic. Newer users can read the concept topic to get a better understanding about the feature. And technical users will benefit from the detailed information in a reference topic that covers all of the configuration settings for a product or feature.</p> <p>As a writer, you must be consistent with the content in each topic type so users can trust the documentation and know where to go to find what they are looking for within your documentation.</p> <p>One challenge is figuring out which topic to put some content into. You may run into some content that does not fit into any of these types.</p> <p>And while separating topic types helps experienced users find what they need, users who skim documentation may not get the information they need.</p>"},{"location":"#three-adjusting-dita-topic-types","title":"Three - Adjusting DITA Topic Types","text":"<p>Take the DITA topic types and modify them to fit different user types.</p> <ul> <li>Concept Topic - Write a quick summary (a TL:DR) so skimmers can glance at it to understand what this set of topics is about. Use something to denote where the quick summary ends and the full concept begins. How you differentiate between the summary and the main concept is up to you and your preferences. You could add a line to visual separate the quick summary from the main concept. You could use a note format to highlight and isolate the quick summary from the rest of the topic. Or you may find a more subtle way to differentiate the quick summary from the concept for a more elegant or less intrusive solution.</li> <li>Task Topic - If available, use collapsible sections to hide additional information. This allows novices and learners to expand these sections to learn more, when more information is available, but keeps it hidden for users who do not need it.</li> <li>Reference Topic - Leave this as is. Users will read a reference topic when they need to know something specific, like what variables are allowed for a setting.</li> </ul>"},{"location":"concept/","title":"Role-Based Access Control","text":"<p>Quick Summary</p> <p>Role-based access control, or RBAC, allows administrators to control access by creating roles, like read-only, then assigning users to those roles.</p>"},{"location":"concept/#overview","title":"Overview","text":"<p>Role-based access control (RBAC) is a security framework that defines and controls user access to resources based on the roles that users have within an organization. RBAC is a widely used security model, and is supported by many different operating systems, applications, and cloud platforms.</p>"},{"location":"concept/#core-concepts","title":"Core concepts","text":"<p>The RBAC framework is based on the following core concepts:</p> <ul> <li>Roles: Roles represent the different functions that users perform within an organization. For example, some common roles include \"administrator,\" \"manager,\" and \"salesperson.\"</li> <li>Permissions: Permissions define the actions that users can take on resources. For example, some common permissions include \"read,\" \"write,\" and \"execute.\"</li> <li>Role assignments: Role assignments associate users with roles. When a user is assigned to a role, they gain the permissions that are associated with that role.</li> </ul>"},{"location":"concept/#benefits-of-rbac","title":"Benefits of RBAC","text":"<p>RBAC offers a number of benefits, including:</p> <ul> <li>Simplified administration: RBAC allows administrators to manage user access by managing roles. This can simplify administration, especially in large organizations with many users.</li> <li>Improved security: RBAC can help to improve security by reducing the risk of unauthorized access to resources. By assigning users to roles and granting permissions to roles, administrators can ensure that users only have the access they need to perform their jobs.</li> <li>Flexibility: RBAC is a flexible framework that can be adapted to meet the specific needs of an organization. For example, organizations can create custom roles and permissions to meet their specific requirements.</li> </ul>"},{"location":"concept/#example","title":"Example","text":"<p>Here is a simple example of how RBAC can be used:</p> <ul> <li>An organization has two roles: \"administrator\" and \"user.\"</li> <li>The \"administrator\" role has permissions to read, write, and execute all files on the system.</li> <li>The \"user\" role has permissions to read and execute all files on the system, but cannot write to any files.</li> <li>A user named \"John\" is assigned to the \"user\" role.</li> <li>As a result, John can read and execute all files on the system, but he cannot write to any files.</li> </ul>"},{"location":"concept/#conclusion","title":"Conclusion","text":"<p>RBAC is a powerful and flexible security framework that can be used to improve security and simplify administration in organizations of all sizes.</p>"},{"location":"reference/","title":"RBAC Descriptions","text":"<p>This is a reference topic using some role-based access features and descriptions for content. The role type uses a rowspan to visually group the role type descriptions to the role type resource. A rowspan is similar to merging cells in a spreadsheet. For columns, colspan would merge columns.</p> Resource Description resource A resource is something you grant other users access to. A resource can be a file or other object. role type Grant a user access to the resource based on a role type. Role types are: <code>read-only</code>, <code>contributor</code>, and <code>admin</code>. <code>read-only</code>: The user can read the content but cannot modify or delete it. \u2060 <code>contributor</code>: The user can modify the content but cannot delete the file. \u2060 <code>admin</code>: The user can modify and delete the file. \u2060 password A username and password are required to log in. username A username and password are required to log in."},{"location":"task/","title":"Install Agent","text":"<p>This is a task topic using installing a software agent as an example. This topic uses collapsible sections to hide information that is not necessary for most users. If users should experience issues, the collapsible section title must be relevant to the issue (normally what the user sees on their screen, like a message title) so users can expand the section they need. This topic uses the collapsible sections for errors/troubleshooting, but these sections could be used for optional information about the task.</p> <ol> <li>Download the agent installation file.</li> <li> <p>Double-click the agent installation file. A Windows user account control (UAC) message may appear. Click OK to allow the installation.</p> Windows UAC <p>This is a collapsible block. An example of what content this can contain:</p> <p>If you are installing this on a company computer, you may not have permission to install any software. You may need to ask your IT administrator to either grant you access to install the agent or your administrator may install it for you.</p> </li> <li> <p>Enter your username and password. This allows the agent to log in to the cloud server.</p> Cannot Connect to Server <p>This is a collapsible block. An example of what content this can contain:</p> <p>If you see the message \"Cannot connect to server,\" your company might be using a proxy server. You may need to ask your network administrator to allow port 1234. The agent requires port 1234 to upload data to and receive commands from the cloud server.</p> </li> <li> <p>Close the installation window.</p> </li> </ol>"}]}