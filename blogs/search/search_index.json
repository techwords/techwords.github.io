{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Blogs are typically written in a conversational style and is used to share information, opinions, and experiences on a particular topic. This site focuses on writing techniques, tools, and processes related to technical documentation. List of Blogs Docs as Code","title":"Home"},{"location":"#home","text":"Blogs are typically written in a conversational style and is used to share information, opinions, and experiences on a particular topic. This site focuses on writing techniques, tools, and processes related to technical documentation.","title":"Home"},{"location":"#list-of-blogs","text":"Docs as Code","title":"List of Blogs"},{"location":"blogs/docsascode/","text":"Docs as Code: A better way to write and publish documentation Documentation as code (docs as code) is a philosophy and approach to writing and publishing documentation that uses the same tools and processes as software development. This means storing documentation files in a version control system, like Git, and using plain text markup languages, like Markdown or reStructuredText. There are several benefits to using a docs as code approach: Improved collaboration: Docs as code makes it easier for developers and technical writers to collaborate on documentation. This allows both groups to share the ownership of the content and work together. By treating documentation as code, writers can work closer with the development teams. Increased accuracy: Docs as code helps to ensure that documentation is accurate and up-to-date. When documentation is stored in the same repository as the code, it is easier to keep in synchronization with changes to the codebase. Simplified publishing: Docs as code makes it easier to publish documentation to a website or other platform. Static site generators, like MKDocs and Jekyll, can be used to generate HTML from markdown files, which can then be deployed to any web host. To get started with docs as code, you need to choose a version control system, a plain text markup language, and an integrated development environment (IDE). Git is the most popular version control system, Markdown is the most popular plain text markup language for documentation, and Visual Studio Code is a popular IDE. Here are some additional tips for using docs as code: Use GitHub Pages to host your HTML files: With a GitHub account, you can create a public repository to host your HTML files. This is great for a no cost or low cost web host solution as GitHub offers free and team accounts. GitHub also offers enterprise level accounts. Use continuous integration (CI): Continuous integration can be used to automate the process of building and publishing your documentation. When you make changes to your documentation files, CI can automatically build your documentation and deploy it to your website. Use a style guide: A style guide can help ensure that your documentation is consistent and easy to read. Some popular style guides for documentation include the Google Developer Documentation Style Guide and the Write the Docs Style Guide. Docs as code is a powerful approach to writing and publishing documentation. By using the same tools and processes as software development, you can improve collaboration, increase accuracy, and simplify publishing.","title":"Docs as Code: A better way to write and publish documentation"},{"location":"blogs/docsascode/#docs-as-code-a-better-way-to-write-and-publish-documentation","text":"Documentation as code (docs as code) is a philosophy and approach to writing and publishing documentation that uses the same tools and processes as software development. This means storing documentation files in a version control system, like Git, and using plain text markup languages, like Markdown or reStructuredText. There are several benefits to using a docs as code approach: Improved collaboration: Docs as code makes it easier for developers and technical writers to collaborate on documentation. This allows both groups to share the ownership of the content and work together. By treating documentation as code, writers can work closer with the development teams. Increased accuracy: Docs as code helps to ensure that documentation is accurate and up-to-date. When documentation is stored in the same repository as the code, it is easier to keep in synchronization with changes to the codebase. Simplified publishing: Docs as code makes it easier to publish documentation to a website or other platform. Static site generators, like MKDocs and Jekyll, can be used to generate HTML from markdown files, which can then be deployed to any web host. To get started with docs as code, you need to choose a version control system, a plain text markup language, and an integrated development environment (IDE). Git is the most popular version control system, Markdown is the most popular plain text markup language for documentation, and Visual Studio Code is a popular IDE. Here are some additional tips for using docs as code: Use GitHub Pages to host your HTML files: With a GitHub account, you can create a public repository to host your HTML files. This is great for a no cost or low cost web host solution as GitHub offers free and team accounts. GitHub also offers enterprise level accounts. Use continuous integration (CI): Continuous integration can be used to automate the process of building and publishing your documentation. When you make changes to your documentation files, CI can automatically build your documentation and deploy it to your website. Use a style guide: A style guide can help ensure that your documentation is consistent and easy to read. Some popular style guides for documentation include the Google Developer Documentation Style Guide and the Write the Docs Style Guide. Docs as code is a powerful approach to writing and publishing documentation. By using the same tools and processes as software development, you can improve collaboration, increase accuracy, and simplify publishing.","title":"Docs as Code: A better way to write and publish documentation"}]}