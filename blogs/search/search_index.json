{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Blogs are typically written in a conversational style and is used to share information, opinions, and experiences on a particular topic. This site focuses on writing techniques, tools, and processes related to technical documentation. List of Blogs Docs as Code MkDocs Material for MkDocs List of Op-Ed articles Embracing the Future: Docs as Code Flexibility of Documentation","title":"Home"},{"location":"#home","text":"Blogs are typically written in a conversational style and is used to share information, opinions, and experiences on a particular topic. This site focuses on writing techniques, tools, and processes related to technical documentation.","title":"Home"},{"location":"#list-of-blogs","text":"Docs as Code MkDocs Material for MkDocs","title":"List of Blogs"},{"location":"#list-of-op-ed-articles","text":"Embracing the Future: Docs as Code Flexibility of Documentation","title":"List of Op-Ed articles"},{"location":"blogs/docsascode/","text":"Unleashing the Power of Docs as Code: A Paradigm Shift in Documentation In the ever-evolving landscape of software development, the traditional approach to documentation is undergoing a transformative shift. Docs as Code is not just a buzzword; it's a paradigm shift that brings with it a myriad of benefits, revolutionizing the way we create, manage, and deliver documentation in the digital age. Agility and Collaboration : One of the key advantages of adopting Docs as Code is the enhanced agility it brings to documentation processes. By treating documentation as code, teams can leverage version control systems, such as Git, to manage changes, track revisions, and collaborate seamlessly. This approach mirrors the agile methodologies often employed in software development, ensuring that documentation evolves alongside the code it describes. Consistency and Standardization : Docs as Code promotes consistency and standardization across documentation. With documentation stored as text files, it becomes easier to enforce a consistent style, structure, and formatting. This not only improves the overall quality of documentation but also ensures that users have a uniform and intuitive experience when interacting with different parts of the documentation. Automation and Continuous Integration : Automation is a cornerstone of Docs as Code. Integration with continuous integration (CI) systems allows for automated builds and deployments of documentation. This means that every code change triggers a documentation update, ensuring that the documentation is always in sync with the latest features and changes in the codebase. This automation minimizes the risk of outdated or inaccurate documentation. Ease of Contribution : By treating documentation as code, the barrier to entry for contributors is significantly lowered. Developers, who are already familiar with version control systems and text editors, can contribute to documentation using the same tools they use for code. This democratization of the documentation process encourages a broader range of contributors, leading to more diverse and comprehensive documentation. Versioning and Release Management : Docs as Code allows for versioning of documentation in sync with software releases. This enables users to access documentation specific to the version they are using, preventing confusion caused by outdated or incompatible information. Versioned documentation also provides historical context, allowing users to understand how features or APIs have evolved over time. Faster Iteration and Feedback Loops : The iterative nature of software development is mirrored in Docs as Code. Teams can iterate on documentation alongside code changes, enabling faster feedback loops. This agility is crucial, especially in dynamic development environments where rapid iteration and continuous improvement are essential. In conclusion, the adoption of Docs as Code represents a paradigm shift in the way we approach and manage documentation. From fostering collaboration and consistency to enabling automation and faster iteration, the benefits are clear. As software development continues to evolve, embracing Docs as Code is not just a choice; it's a strategic move towards creating documentation that is as dynamic, agile, and responsive as the code it supports.","title":"Unleashing the Power of Docs as Code: A Paradigm Shift in Documentation"},{"location":"blogs/docsascode/#unleashing-the-power-of-docs-as-code-a-paradigm-shift-in-documentation","text":"In the ever-evolving landscape of software development, the traditional approach to documentation is undergoing a transformative shift. Docs as Code is not just a buzzword; it's a paradigm shift that brings with it a myriad of benefits, revolutionizing the way we create, manage, and deliver documentation in the digital age. Agility and Collaboration : One of the key advantages of adopting Docs as Code is the enhanced agility it brings to documentation processes. By treating documentation as code, teams can leverage version control systems, such as Git, to manage changes, track revisions, and collaborate seamlessly. This approach mirrors the agile methodologies often employed in software development, ensuring that documentation evolves alongside the code it describes. Consistency and Standardization : Docs as Code promotes consistency and standardization across documentation. With documentation stored as text files, it becomes easier to enforce a consistent style, structure, and formatting. This not only improves the overall quality of documentation but also ensures that users have a uniform and intuitive experience when interacting with different parts of the documentation. Automation and Continuous Integration : Automation is a cornerstone of Docs as Code. Integration with continuous integration (CI) systems allows for automated builds and deployments of documentation. This means that every code change triggers a documentation update, ensuring that the documentation is always in sync with the latest features and changes in the codebase. This automation minimizes the risk of outdated or inaccurate documentation. Ease of Contribution : By treating documentation as code, the barrier to entry for contributors is significantly lowered. Developers, who are already familiar with version control systems and text editors, can contribute to documentation using the same tools they use for code. This democratization of the documentation process encourages a broader range of contributors, leading to more diverse and comprehensive documentation. Versioning and Release Management : Docs as Code allows for versioning of documentation in sync with software releases. This enables users to access documentation specific to the version they are using, preventing confusion caused by outdated or incompatible information. Versioned documentation also provides historical context, allowing users to understand how features or APIs have evolved over time. Faster Iteration and Feedback Loops : The iterative nature of software development is mirrored in Docs as Code. Teams can iterate on documentation alongside code changes, enabling faster feedback loops. This agility is crucial, especially in dynamic development environments where rapid iteration and continuous improvement are essential. In conclusion, the adoption of Docs as Code represents a paradigm shift in the way we approach and manage documentation. From fostering collaboration and consistency to enabling automation and faster iteration, the benefits are clear. As software development continues to evolve, embracing Docs as Code is not just a choice; it's a strategic move towards creating documentation that is as dynamic, agile, and responsive as the code it supports.","title":"Unleashing the Power of Docs as Code: A Paradigm Shift in Documentation"},{"location":"blogs/material/","text":"Material for MkDocs: A Beautiful Theme for Documentation Material for MkDocs is a popular theme for the MkDocs static site generator. It provides a beautiful and modern Material Design look and feel for your documentation. Material for MkDocs is also highly customizable, so you can tailor it to the specific needs of your project. Beautiful Material Design: Material for MkDocs provides a beautiful and modern Material Design look and feel for your documentation. Highly customizable: Material for MkDocs is highly customizable, so you can tailor it to the specific needs of your project. There are a variety of settings that you can configure, such as the theme color, fonts, and layout. Responsive: Material for MkDocs is responsive, so your documentation will look great on any device, from desktop to mobile. Feature-rich: Material for MkDocs includes a number of features that make it a great choice for building documentation, such as an automatic dark and light mode, tooltips, a card gird, and content tabs. Material for MkDocs also offers a number of other features, such as: Social sharing: Material for MkDocs includes a built-in social sharing feature, so users can easily share your documentation with their friends and colleagues. Tooltips: Material for MkDocs allows adding a tooltip message that appears when a cursor is positioned over the tooltip icon. Card grid: Material for MkDocs makes it easy to arrange sections into grids and grouping blocks of similar content together. Content tabs: Material for MkDocs allows grouping alternative content under different tabs within a topic. Instead of having three different sections for installing on Windows, macOS, and Linux, you have three content tabs, each displaying the steps for an operating system. Material for MkDocs is a great choice for building documentation. It's beautiful, feature-rich, flexible, and easy to use. If you are looking for a simple way to create beautiful and highly customizable documentation for your project, I strongly recommend checking out Material for MkDocs.","title":"Material for MkDocs: A Beautiful Theme for Documentation"},{"location":"blogs/material/#material-for-mkdocs-a-beautiful-theme-for-documentation","text":"Material for MkDocs is a popular theme for the MkDocs static site generator. It provides a beautiful and modern Material Design look and feel for your documentation. Material for MkDocs is also highly customizable, so you can tailor it to the specific needs of your project. Beautiful Material Design: Material for MkDocs provides a beautiful and modern Material Design look and feel for your documentation. Highly customizable: Material for MkDocs is highly customizable, so you can tailor it to the specific needs of your project. There are a variety of settings that you can configure, such as the theme color, fonts, and layout. Responsive: Material for MkDocs is responsive, so your documentation will look great on any device, from desktop to mobile. Feature-rich: Material for MkDocs includes a number of features that make it a great choice for building documentation, such as an automatic dark and light mode, tooltips, a card gird, and content tabs. Material for MkDocs also offers a number of other features, such as: Social sharing: Material for MkDocs includes a built-in social sharing feature, so users can easily share your documentation with their friends and colleagues. Tooltips: Material for MkDocs allows adding a tooltip message that appears when a cursor is positioned over the tooltip icon. Card grid: Material for MkDocs makes it easy to arrange sections into grids and grouping blocks of similar content together. Content tabs: Material for MkDocs allows grouping alternative content under different tabs within a topic. Instead of having three different sections for installing on Windows, macOS, and Linux, you have three content tabs, each displaying the steps for an operating system. Material for MkDocs is a great choice for building documentation. It's beautiful, feature-rich, flexible, and easy to use. If you are looking for a simple way to create beautiful and highly customizable documentation for your project, I strongly recommend checking out Material for MkDocs.","title":"Material for MkDocs: A Beautiful Theme for Documentation"},{"location":"blogs/mkdocs/","text":"MkDocs: Powerful Project Documentation MkDocs is a fast and simple static site generator that is geared towards building project documentation. It is easy to use and customize, and it produces beautiful and informative documentation that is perfect for any project. Here are some of the key features of MKDocs: Markdown support: MkDocs uses Markdown files for writing documentation, which is a lightweight markup language that is easy to learn and use. Themes: MkDocs comes with a variety of built-in themes so you can customize the look and feel of your documentation with just a few clicks. Plugins: MkDocs has a large and active plugin ecosystem, so you can extend its functionality to meet your specific needs. Static site generation: MkDocs generates static HTML files, which means your documentation will be fast and reliable to serve to users. Easy to deploy: MkDocs documentation can be easily deployed to any web host, including GitHub Pages (the host for this site). In addition to these core features, MkDocs also offers a number of other features that make it a great choice for building project documentation, such as: Code highlighting: MkDocs can highlight code blocks in a variety of languages, making it easy to read and understand code examples. Versioning: MkDocs can automatically generate documentation for different versions of your project, so you can keep your documentation up-to-date with your code. Search: MkDocs includes a built-in search feature, so users can easily find the information they are looking for in your documentation. Table of contents: MkDocs can automatically generate a table of contents for your documentation, making it easy for users to navigate your documentation. Math equations: MkDocs can render math equations in your documentation using MathJax. Images and diagrams: MkDocs can embed images and diagrams in your documentation, making it more visually appealing and informative. MkDocs is a great choice for building project documentation. It is easy to use, powerful, flexible, fast, and reliable. If you're looking for a way to create beautiful and informative documentation for your project, I highly recommend checking out MkDocs.","title":"MkDocs: Powerful Project Documentation"},{"location":"blogs/mkdocs/#mkdocs-powerful-project-documentation","text":"MkDocs is a fast and simple static site generator that is geared towards building project documentation. It is easy to use and customize, and it produces beautiful and informative documentation that is perfect for any project. Here are some of the key features of MKDocs: Markdown support: MkDocs uses Markdown files for writing documentation, which is a lightweight markup language that is easy to learn and use. Themes: MkDocs comes with a variety of built-in themes so you can customize the look and feel of your documentation with just a few clicks. Plugins: MkDocs has a large and active plugin ecosystem, so you can extend its functionality to meet your specific needs. Static site generation: MkDocs generates static HTML files, which means your documentation will be fast and reliable to serve to users. Easy to deploy: MkDocs documentation can be easily deployed to any web host, including GitHub Pages (the host for this site). In addition to these core features, MkDocs also offers a number of other features that make it a great choice for building project documentation, such as: Code highlighting: MkDocs can highlight code blocks in a variety of languages, making it easy to read and understand code examples. Versioning: MkDocs can automatically generate documentation for different versions of your project, so you can keep your documentation up-to-date with your code. Search: MkDocs includes a built-in search feature, so users can easily find the information they are looking for in your documentation. Table of contents: MkDocs can automatically generate a table of contents for your documentation, making it easy for users to navigate your documentation. Math equations: MkDocs can render math equations in your documentation using MathJax. Images and diagrams: MkDocs can embed images and diagrams in your documentation, making it more visually appealing and informative. MkDocs is a great choice for building project documentation. It is easy to use, powerful, flexible, fast, and reliable. If you're looking for a way to create beautiful and informative documentation for your project, I highly recommend checking out MkDocs.","title":"MkDocs: Powerful Project Documentation"},{"location":"op_ed/flexibilitydocs/","text":"Flexibility of Documentation: A Technical Writer's Superpower Technical writers play a vital role in helping users understand and use products and software. While writing documentation is not a trivial task, it is generally easier to update and release documentation than to update and release software. This makes technical writers uniquely positioned to save the day when users encounter problems. This flexibility makes documentation an essential tool for helping users with a product or software. When users have problems using a product, it is not always due to usability or user interface issues. Sometimes, users simply need more information about how something works. Documentation can help by providing more details in the overview, steps, or reference material for a product or feature. Here are a few ways that technical writers can use the flexibility of documentation to help users quickly: Use a version control system: This will allow you to track changes to your documentation and revert to previous versions if necessary. Use a documentation generator: This type of tool can help you generate documentation automatically from your source code. This can save you time and effort. Use a development workflow: If you can incorporate your documentation process into your organization's development workflow, your documentation updates could be published quickly and your updated content getting to users faster. Use a modular approach: Break down your documentation into smaller modules, each of which covers a specific topic. This will make it easier to update individual modules without having to update the entire document. DITA topic types is an example. By following these tips, technical writers can create documentation that is flexible and easy to update. This will help them support their users and help their teams be more successful. In addition to the tips above, here are a few other ways that technical writers can proactively help their users: Include a troubleshooting section in documentation to help users resolve common problems. Provide users with tips and tricks for using the product or software more effectively. Include links to related information within your documentation. This helps your users find the next, logical topic to read instead of making them search for the related topic. By taking these types of actions, technical writers can help users avoid problems and get the most out of their products and software.","title":"Flexibility of Documentation: A Technical Writer's Superpower"},{"location":"op_ed/flexibilitydocs/#flexibility-of-documentation-a-technical-writers-superpower","text":"Technical writers play a vital role in helping users understand and use products and software. While writing documentation is not a trivial task, it is generally easier to update and release documentation than to update and release software. This makes technical writers uniquely positioned to save the day when users encounter problems. This flexibility makes documentation an essential tool for helping users with a product or software. When users have problems using a product, it is not always due to usability or user interface issues. Sometimes, users simply need more information about how something works. Documentation can help by providing more details in the overview, steps, or reference material for a product or feature. Here are a few ways that technical writers can use the flexibility of documentation to help users quickly: Use a version control system: This will allow you to track changes to your documentation and revert to previous versions if necessary. Use a documentation generator: This type of tool can help you generate documentation automatically from your source code. This can save you time and effort. Use a development workflow: If you can incorporate your documentation process into your organization's development workflow, your documentation updates could be published quickly and your updated content getting to users faster. Use a modular approach: Break down your documentation into smaller modules, each of which covers a specific topic. This will make it easier to update individual modules without having to update the entire document. DITA topic types is an example. By following these tips, technical writers can create documentation that is flexible and easy to update. This will help them support their users and help their teams be more successful. In addition to the tips above, here are a few other ways that technical writers can proactively help their users: Include a troubleshooting section in documentation to help users resolve common problems. Provide users with tips and tricks for using the product or software more effectively. Include links to related information within your documentation. This helps your users find the next, logical topic to read instead of making them search for the related topic. By taking these types of actions, technical writers can help users avoid problems and get the most out of their products and software.","title":"Flexibility of Documentation: A Technical Writer's Superpower"},{"location":"op_ed/switchdocsascode/","text":"Embracing the Future: Docs as Code As a technical writer for over 20 years, I have seen the documentation landscape change dramatically. From Microsoft Word to Adobe FrameMaker to specialized documentation tools, like Author-It and MadCap Flare. We have access to increasingly more powerful and elegant tools to help us create high-quality documentation. But in recent years, a new approach to documentation has emerged: docs as code. Docs as code is a way of writing documentation using the same tools and processes that software developers use to write code. This has a number of advantages for technical writers, including: Improved collaboration with developers and QA: Traditionally, the documentation review process involves a lot of back-and-forth between writers, developers, and QA teams, typically emailing PDFs with comments. Docs as code makes it easier for developers and QA engineers to review documentation, since they can use the same tools that they use for their daily work. This can help to ensure that documentation is accurate and up-to-date. Automated documentation builds: Docs as coe can be integrated into the development workflow, so that documentation is automatically built and published whenever the code is changed. This helps to enure that documentation is always in sync with the latest code changes. Open source tools: There are a number of open source tools available for docs as code, which means that technical writers can get started without having to purchase expensive licenses. Having developers and QA review documentation also does not require any additional licenses. Of course, there are also some drawbacks to docs as code: Learning curve: Docs as code requires technical writers to learn new tools and processes, such as using code editors like Visual Studio Code and learning about Git and GitHub. No WYSIWYG editing: Docs as code tools do not typically offer WYSIWYG (what you see is what you get) editing, which can make it more difficult to preview and edit documentation. Community support: Open source tools can have variable levels of community support, so it's important to choose a tool that has a strong community behind it. Overall, I believe that the benefits of docs as code outweigh the drawbacks. Docs as code can help technical writers to improve their collaboration with developers and QA, automate their documentation builds, and save money on licensing costs. If you are a technical writer who is considering adopting docs as code, I recommend starting by choosing an open source tool that has a strong community behind it. There are a number of resources available to help you learn how to use docs as code tools and processes. And once you get started, you will be glad that you did. Writing Tools: MkDocs Material for MkDocs Docutils Sphinx Gatsby Jekyll Docusaurus","title":"Embracing the Future: Docs as Code"},{"location":"op_ed/switchdocsascode/#embracing-the-future-docs-as-code","text":"As a technical writer for over 20 years, I have seen the documentation landscape change dramatically. From Microsoft Word to Adobe FrameMaker to specialized documentation tools, like Author-It and MadCap Flare. We have access to increasingly more powerful and elegant tools to help us create high-quality documentation. But in recent years, a new approach to documentation has emerged: docs as code. Docs as code is a way of writing documentation using the same tools and processes that software developers use to write code. This has a number of advantages for technical writers, including: Improved collaboration with developers and QA: Traditionally, the documentation review process involves a lot of back-and-forth between writers, developers, and QA teams, typically emailing PDFs with comments. Docs as code makes it easier for developers and QA engineers to review documentation, since they can use the same tools that they use for their daily work. This can help to ensure that documentation is accurate and up-to-date. Automated documentation builds: Docs as coe can be integrated into the development workflow, so that documentation is automatically built and published whenever the code is changed. This helps to enure that documentation is always in sync with the latest code changes. Open source tools: There are a number of open source tools available for docs as code, which means that technical writers can get started without having to purchase expensive licenses. Having developers and QA review documentation also does not require any additional licenses. Of course, there are also some drawbacks to docs as code: Learning curve: Docs as code requires technical writers to learn new tools and processes, such as using code editors like Visual Studio Code and learning about Git and GitHub. No WYSIWYG editing: Docs as code tools do not typically offer WYSIWYG (what you see is what you get) editing, which can make it more difficult to preview and edit documentation. Community support: Open source tools can have variable levels of community support, so it's important to choose a tool that has a strong community behind it. Overall, I believe that the benefits of docs as code outweigh the drawbacks. Docs as code can help technical writers to improve their collaboration with developers and QA, automate their documentation builds, and save money on licensing costs. If you are a technical writer who is considering adopting docs as code, I recommend starting by choosing an open source tool that has a strong community behind it. There are a number of resources available to help you learn how to use docs as code tools and processes. And once you get started, you will be glad that you did. Writing Tools: MkDocs Material for MkDocs Docutils Sphinx Gatsby Jekyll Docusaurus","title":"Embracing the Future: Docs as Code"}]}