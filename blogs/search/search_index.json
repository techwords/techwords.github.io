{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Blogs are typically written in a conversational style and is used to share information, opinions, and experiences on a particular topic. This site focuses on writing techniques, tools, and processes related to technical documentation. List of Blogs Docs as Code MkDocs Material for MkDocs","title":"Home"},{"location":"#home","text":"Blogs are typically written in a conversational style and is used to share information, opinions, and experiences on a particular topic. This site focuses on writing techniques, tools, and processes related to technical documentation.","title":"Home"},{"location":"#list-of-blogs","text":"Docs as Code MkDocs Material for MkDocs","title":"List of Blogs"},{"location":"blogs/docsascode/","text":"Docs as Code: A better way to write and publish documentation Documentation as code (docs as code) is a philosophy and approach to writing and publishing documentation that uses the same tools and processes as software development. This means storing documentation files in a version control system, like Git, and using plain text markup languages, like Markdown or reStructuredText. There are several benefits to using a docs as code approach: Improved collaboration: Docs as code makes it easier for developers and technical writers to collaborate on documentation. This allows both groups to share the ownership of the content and work together. By treating documentation as code, writers can work closer with the development teams. Increased accuracy: Docs as code helps to ensure that documentation is accurate and up-to-date. When documentation is stored in the same repository as the code, it is easier to keep in synchronization with changes to the codebase. Simplified publishing: Docs as code makes it easier to publish documentation to a website or other platform. Static site generators, like MKDocs and Jekyll, can be used to generate HTML from markdown files, which can then be deployed to any web host. To get started with docs as code, you need to choose a version control system, a plain text markup language, and an integrated development environment (IDE). Git is the most popular version control system, Markdown is the most popular plain text markup language for documentation, and Visual Studio Code is a popular IDE. Here are some additional tips for using docs as code: Use GitHub Pages to host your HTML files: With a GitHub account, you can create a public repository to host your HTML files. This is great for a no cost or low cost web host solution as GitHub offers free and team accounts. GitHub also offers enterprise level accounts. Use continuous integration (CI): Continuous integration can be used to automate the process of building and publishing your documentation. When you make changes to your documentation files, CI can automatically build your documentation and deploy it to your website. Use a style guide: A style guide can help ensure that your documentation is consistent and easy to read. Some popular style guides for documentation include the Google Developer Documentation Style Guide and the Write the Docs Style Guide. Docs as code is a powerful approach to writing and publishing documentation. By using the same tools and processes as software development, you can improve collaboration, increase accuracy, and simplify publishing.","title":"Docs as Code: A better way to write and publish documentation"},{"location":"blogs/docsascode/#docs-as-code-a-better-way-to-write-and-publish-documentation","text":"Documentation as code (docs as code) is a philosophy and approach to writing and publishing documentation that uses the same tools and processes as software development. This means storing documentation files in a version control system, like Git, and using plain text markup languages, like Markdown or reStructuredText. There are several benefits to using a docs as code approach: Improved collaboration: Docs as code makes it easier for developers and technical writers to collaborate on documentation. This allows both groups to share the ownership of the content and work together. By treating documentation as code, writers can work closer with the development teams. Increased accuracy: Docs as code helps to ensure that documentation is accurate and up-to-date. When documentation is stored in the same repository as the code, it is easier to keep in synchronization with changes to the codebase. Simplified publishing: Docs as code makes it easier to publish documentation to a website or other platform. Static site generators, like MKDocs and Jekyll, can be used to generate HTML from markdown files, which can then be deployed to any web host. To get started with docs as code, you need to choose a version control system, a plain text markup language, and an integrated development environment (IDE). Git is the most popular version control system, Markdown is the most popular plain text markup language for documentation, and Visual Studio Code is a popular IDE. Here are some additional tips for using docs as code: Use GitHub Pages to host your HTML files: With a GitHub account, you can create a public repository to host your HTML files. This is great for a no cost or low cost web host solution as GitHub offers free and team accounts. GitHub also offers enterprise level accounts. Use continuous integration (CI): Continuous integration can be used to automate the process of building and publishing your documentation. When you make changes to your documentation files, CI can automatically build your documentation and deploy it to your website. Use a style guide: A style guide can help ensure that your documentation is consistent and easy to read. Some popular style guides for documentation include the Google Developer Documentation Style Guide and the Write the Docs Style Guide. Docs as code is a powerful approach to writing and publishing documentation. By using the same tools and processes as software development, you can improve collaboration, increase accuracy, and simplify publishing.","title":"Docs as Code: A better way to write and publish documentation"},{"location":"blogs/material/","text":"Material for MkDocs: A Beautiful Theme for Documentation Material for MkDocs is a popular theme for the MkDocs static site generator. It provides a beautiful and modern Material Design look and feel for your documentation. Material for MkDocs is also highly customizable, so you can tailor it to the specific needs of your project. Beautiful Material Design: Material for MkDocs provides a beautiful and modern Material Design look and feel for your documentation. Highly customizable: Material for MkDocs is highly customizable, so you can tailor it to the specific needs of your project. There are a variety of settings that you can configure, such as the theme color, fonts, and layout. Responsive: Material for MkDocs is responsive, so your documentation will look great on any device, from desktop to mobile. Feature-rich: Material for MkDocs includes a number of features that make it a great choice for building documentation, such as an automatic dark and light mode, tooltips, a card gird, and content tabs. Material for MkDocs also offers a number of other features, such as: Social sharing: Material for MkDocs includes a built-in social sharing feature, so users can easily share your documentation with their friends and colleagues. Tooltips: Material for MkDocs allows adding a tooltip message that appears when a cursor is positioned over the tooltip icon. Card grid: Material for MkDocs makes it easy to arrange sections into grids and grouping blocks of similar content together. Content tabs: Material for MkDocs allows grouping alternative content under different tabs within a topic. Instead of having three different sections for installing on Windows, macOS, and Linux, you have three content tabs, each displaying the steps for an operating system. Material for MkDocs is a great choice for building documentation. It's beautiful, feature-rich, flexible, and easy to use. If you are looking for a simple way to create beautiful and highly customizable documentation for your project, I strongly recommend checking out Material for MkDocs.","title":"Material for MkDocs: A Beautiful Theme for Documentation"},{"location":"blogs/material/#material-for-mkdocs-a-beautiful-theme-for-documentation","text":"Material for MkDocs is a popular theme for the MkDocs static site generator. It provides a beautiful and modern Material Design look and feel for your documentation. Material for MkDocs is also highly customizable, so you can tailor it to the specific needs of your project. Beautiful Material Design: Material for MkDocs provides a beautiful and modern Material Design look and feel for your documentation. Highly customizable: Material for MkDocs is highly customizable, so you can tailor it to the specific needs of your project. There are a variety of settings that you can configure, such as the theme color, fonts, and layout. Responsive: Material for MkDocs is responsive, so your documentation will look great on any device, from desktop to mobile. Feature-rich: Material for MkDocs includes a number of features that make it a great choice for building documentation, such as an automatic dark and light mode, tooltips, a card gird, and content tabs. Material for MkDocs also offers a number of other features, such as: Social sharing: Material for MkDocs includes a built-in social sharing feature, so users can easily share your documentation with their friends and colleagues. Tooltips: Material for MkDocs allows adding a tooltip message that appears when a cursor is positioned over the tooltip icon. Card grid: Material for MkDocs makes it easy to arrange sections into grids and grouping blocks of similar content together. Content tabs: Material for MkDocs allows grouping alternative content under different tabs within a topic. Instead of having three different sections for installing on Windows, macOS, and Linux, you have three content tabs, each displaying the steps for an operating system. Material for MkDocs is a great choice for building documentation. It's beautiful, feature-rich, flexible, and easy to use. If you are looking for a simple way to create beautiful and highly customizable documentation for your project, I strongly recommend checking out Material for MkDocs.","title":"Material for MkDocs: A Beautiful Theme for Documentation"},{"location":"blogs/mkdocs/","text":"MkDocs: Powerful Project Documentation MkDocs is a fast and simple static site generator that is geared towards building project documentation. It is easy to use and customize, and it produces beautiful and informative documentation that is perfect for any project. Here are some of the key features of MKDocs: Markdown support: MkDocs uses Markdown files for writing documentation, which is a lightweight markup language that is easy to learn and use. Themes: MkDocs comes with a variety of built-in themes so you can customize the look and feel of your documentation with just a few clicks. Plugins: MkDocs has a large and active plugin ecosystem, so you can extend its functionality to meet your specific needs. Static site generation: MkDocs generates static HTML files, which means your documentation will be fast and reliable to serve to users. Easy to deploy: MkDocs documentation can be easily deployed to any web host, including GitHub Pages (the host for this site). In addition to these core features, MkDocs also offers a number of other features that make it a great choice for building project documentation, such as: Code highlighting: MkDocs can highlight code blocks in a variety of languages, making it easy to read and understand code examples. Versioning: MkDocs can automatically generate documentation for different versions of your project, so you can keep your documentation up-to-date with your code. Search: MkDocs includes a built-in search feature, so users can easily find the information they are looking for in your documentation. Table of contents: MkDocs can automatically generate a table of contents for your documentation, making it easy for users to navigate your documentation. Math equations: MkDocs can render math equations in your documentation using MathJax. Images and diagrams: MkDocs can embed images and diagrams in your documentation, making it more visually appealing and informative. MkDocs is a great choice for building project documentation. It is easy to use, powerful, flexible, fast, and reliable. If you're looking for a way to create beautiful and informative documentation for your project, I highly recommend checking out MkDocs.","title":"MkDocs: Powerful Project Documentation"},{"location":"blogs/mkdocs/#mkdocs-powerful-project-documentation","text":"MkDocs is a fast and simple static site generator that is geared towards building project documentation. It is easy to use and customize, and it produces beautiful and informative documentation that is perfect for any project. Here are some of the key features of MKDocs: Markdown support: MkDocs uses Markdown files for writing documentation, which is a lightweight markup language that is easy to learn and use. Themes: MkDocs comes with a variety of built-in themes so you can customize the look and feel of your documentation with just a few clicks. Plugins: MkDocs has a large and active plugin ecosystem, so you can extend its functionality to meet your specific needs. Static site generation: MkDocs generates static HTML files, which means your documentation will be fast and reliable to serve to users. Easy to deploy: MkDocs documentation can be easily deployed to any web host, including GitHub Pages (the host for this site). In addition to these core features, MkDocs also offers a number of other features that make it a great choice for building project documentation, such as: Code highlighting: MkDocs can highlight code blocks in a variety of languages, making it easy to read and understand code examples. Versioning: MkDocs can automatically generate documentation for different versions of your project, so you can keep your documentation up-to-date with your code. Search: MkDocs includes a built-in search feature, so users can easily find the information they are looking for in your documentation. Table of contents: MkDocs can automatically generate a table of contents for your documentation, making it easy for users to navigate your documentation. Math equations: MkDocs can render math equations in your documentation using MathJax. Images and diagrams: MkDocs can embed images and diagrams in your documentation, making it more visually appealing and informative. MkDocs is a great choice for building project documentation. It is easy to use, powerful, flexible, fast, and reliable. If you're looking for a way to create beautiful and informative documentation for your project, I highly recommend checking out MkDocs.","title":"MkDocs: Powerful Project Documentation"}]}